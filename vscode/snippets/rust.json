{
    "Create an error enum": {
        "prefix": "pub enum Error",
        "body": [
            "/// Error variants for $2.",
            "#[derive(Debug)]",
            "#[non_exhaustive]",
            "#[allow(missing_docs)]",
            "pub enum ${1:Error} {",
            "    $0",
            "}",
            "impl core::fmt::Display for ${1:Error} {",
            "    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {",
            "        match &self {",
            "            _ => todo!()",
            "        }",
            "    }",
            "}",
            "impl core::error::Error for ${1:Error} {",
            "    fn source(&self) -> Option<&(dyn core::error::Error + 'static)> {",
            "        match &self {",
            "            _ => None,",
            "        }",
            "    }",
            "}",
            "impl ${1:Error} { }"
        ],
        "description": "Create a new error enum"
    },
    "Create an error function": {
        "prefix": "pub fn error",
        "body": [
            "pub fn ${1:error}(source: ${2:source}) -> Self {",
            "    Self::${3:Variant} {",
            "        source,$4",
            "    }",
            "}$0"
        ]
    },
    "Create an error variant": {
        "prefix": "Variant",
        "body": [
            "#[non_exhaustive]",
            "${1:Variant} {",
            "    source: $2,",
            "    $3",
            "},$0"
        ],
        "description": "Create a new error variant"
    },
    "Error source arm": {
        "prefix": "Self::Variant",
        "body": [
            "Self::${1:Variant} { source, ..} => Some(source),"
        ],
        "description": "Create an arm that returns the source for a given error variant."
    },
    "Error display arm": {
        "prefix": "Self::Variant",
        "body": [
            "Self::${1:Variant} { $2.. } => write!(f, \"$3\"),"
        ],
        "description": "Create an arm that displays a given error variant."
    },
    "Map an error struct": {
        "prefix": "map_err",
        "body": [
            "map_err(|source| ${1:Error}::${2:Variant} { source$3 })$0"
        ],
        "description": "Map an error to a struct-like enum variant"
    },
    "Map an error function": {
        "prefix": "map_err",
        "body": [
            "map_err(|source| ${1:Error}::${2:function}(source$3))$0"
        ],
        "description": "Map an error to a enum variant function"
    },
    "Map an error source": {
        "prefix": "map_err",
        "body": [
            "map_err(${1:Error}::${2:function})$0"
        ],
        "description": "Map an error to a function that only takes the source"
    }
}
